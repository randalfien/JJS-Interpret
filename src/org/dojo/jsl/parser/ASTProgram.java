/* Generated By:JJTree: Do not edit this line. ASTProgram.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package org.dojo.jsl.parser;

import cz.fit.cvut.paskaond.jsruntime.Evalable;
import cz.fit.cvut.paskaond.jsruntime.JSEnvironment;

public class ASTProgram extends SimpleNode implements Evalable {
	
	protected Object lastValue;
	public ASTProgram(int id) {
		super(id);
	}

	public ASTProgram(EcmaScript p, int id) {
		super(p, id);
	}


	/** Accept the visitor. **/
	public Object jjtAccept(EcmaScriptVisitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	@Override
	public Object evalIn(JSEnvironment env) {
		
		registerFunctions(env);
		
		Object lastValue = null;
		for (int i = 0; i < children.length; i++) {
			if( env.isReturnCalled() ){
				env.setReturnCalled(false);
				return env.getReturnValue();
			}
			Node child = children[i];
			if( child instanceof ASTFunctionDeclaration){
				continue; //should be already registered
			}
			lastValue = ((Evalable) child).evalIn(env);
		}
		return lastValue;
	}

	private void registerFunctions(JSEnvironment env) {
		if( children == null ){
			return;
		}
		for (int i = 0; i < children.length; i++) {
			Node child = children[i];
			if( child instanceof ASTFunctionDeclaration){
				((Evalable) child).evalIn(env);
			}
		}
	}

}
/* JavaCC - OriginalChecksum=8b548fdde0e2959386bafd258cdbfc84 (do not edit this line) */
