/* Generated By:JJTree: Do not edit this line. ASTAssignmentExpression.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package org.dojo.jsl.parser;

import cz.fit.cvut.paskaond.jsruntime.Evalable;
import cz.fit.cvut.paskaond.jsruntime.JSEnvironment;
import cz.fit.cvut.paskaond.jsruntime.builtin.operators.JSBinaryOperator;
/*
 * AssignmentExpression
			CompositeReference
				Identifier[a]
				PropertyValueReference
					StringLiteral[attr2]
			Operator
			NumberLiteral[6] 
			
			
	== OR ==
	
	AssignmentExpression
			Identifier[a]
			Operator
			NumberLiteral[6]
 *
 *
 */
public class ASTAssignmentExpression extends SimpleNode implements Evalable{
	public ASTAssignmentExpression(int id) {
		super(id);
	}

	public ASTAssignmentExpression(EcmaScript p, int id) {
		super(p, id);
	}

	/** Accept the visitor. **/
	public Object jjtAccept(EcmaScriptVisitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	@Override
	public Object evalIn(JSEnvironment env) {

		//First eval result of right side
		ASTOperator op = (ASTOperator) children[1];
		JSBinaryOperator opFunc = (JSBinaryOperator) env.get(op.getType());
		Object value = ((Evalable) children[2]).evalIn(env);
		
		Node n = children[0];
		
		if(n instanceof ASTIdentifier){
			String name =  ((ASTIdentifier) n).getName(); 
			Object currentValue = env.get(name);
			value = opFunc.call(currentValue, value);
			env.update( name ,  value);
		}else if( n instanceof ASTCompositeReference){
			((ASTCompositeReference) n).setToFinalObject(value, opFunc, env);
		}
		
		return value;
	}
}
/* JavaCC - OriginalChecksum=008542e5c8aaac026d6e3b347e96ed49 (do not edit this line) */
